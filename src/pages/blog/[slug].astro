---
import { marked } from 'marked';
import DOMPurify from 'isomorphic-dompurify';

import ContactCTA from '../../components/ContactCTA.astro';
import Hero from '../../components/Hero.astro';
import Icon from '../../components/Icon.astro';
import BaseLayout from '../../layouts/BaseLayout.astro';
import type { BlogPost } from '../../lib/contentful';
import { contentfulClient } from '../../lib/contentful';
import Prism from 'prismjs';
import loadLanguages from 'prismjs/components/index.js';
// import { getHighlighter } from 'shiki';

// 自定义shiki渲染器
// const highlighter = await getHighlighter({
//   themes: ['dracula'],
//   langs: ['typescript']
// });
// const renderer = {
// 	code: (code: string, language = '') => {
// 		console.log(code, language);
//     return highlighter.codeToHtml(code, {
// 			lang: 'typescript',
// 			theme: 'dracula',
// 		});
// 	}
// };

// 加载 Prism 支持的语言
loadLanguages(['typescript']);

// 自定义prisma渲染器
const renderer = {
	code: (code: string, language = '') => {
		// 确保语言是有效的，否则默认为 'markup'
		const validLanguage = Prism.languages[language] || Prism.languages.markup;
		// 使用 Prism 进行代码高亮
		const highlighted = Prism.highlight(code, validLanguage, language);
		// 返回高亮后的 HTML 字符串
		return `<pre class="language-${language}"><code class="language-${language}">${highlighted}</code></pre>`;
	}
};

// 使用自定义渲染器
marked.use({ renderer });

export const prerender = true;

export async function getStaticPaths() {
  const { items } = await contentfulClient.getEntries<BlogPost>({
    content_type: 'blogPost'
  })

	return items.map(item => ({
			params: { slug: item.fields.slug },
			props: {
				tags: item.fields.tags,
				title: item.fields.title,
				content: DOMPurify.sanitize(marked.parse(String(item.fields.body))),
				description: item.fields.description,
				heroImage: item.fields.heroImage?.fields,
				date: new Date(item.fields.publishDate).toLocaleDateString()
			}
	}))
}
const { title, content, date, description, heroImage } = Astro.props;
Astro.response.headers.set('Cache-Control', 's-maxage=86400, stale-while-revalidate=604800');
---
<BaseLayout title={title} description={description}>
	<div class="stack gap-20 blog-detail">
		<div class="stack gap-15">
			<header>
				<div class="wrapper stack gap-2">
					<a class="back-link" href="/blog/"><Icon icon="arrow-left" /><span class="back-text">博客列表</span></a>
					<Hero title={title} align="start">
						<div class="details">
							<p class="description">{description}</p>
						</div>
					</Hero>
				</div>
			</header>
			<main class="wrapper">
				<div class="stack gap-10 content">
					{heroImage && <img src={heroImage.file.url} alt={heroImage.title || ''} />}
					<article set:html={content} />
				</div>
			</main>
		</div>
		<ContactCTA />
	</div>
</BaseLayout>

<style lang="scss">
.blog-detail {
	color: var(--gray-0);
}
.content {
	img {
		margin: auto;
		width: 50%;
		border-radius: 4px;
	}
}

.back-link {
	color: var(--gray-0);
	font-size: var(--text-lg);
	margin-bottom: 20px;
	.back-text {
		margin-left: 5px;
	}
}

.description {
	display: inline-block;
	background: var(--gray-box-bg);
	color: var(--gray-dark);
	padding: 8px 16px;
	font-size: var(--text-md);
	border-radius: 4px;
}
</style>
